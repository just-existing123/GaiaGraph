<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Force Graph - Basic Example</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      background-color: #000000;  /* Dark background for better contrast */
      color: #ffffff;  /* Light text for dark background */
    }
    #app {
      width: 100vw;
      height: 100vh;
      overflow: hidden;
    }
    .title {
      position: absolute;
      top: 20px;
      left: 20px;
      font-size: 32px;
      font-weight: bold;
      color: rgba(76, 175, 80, 0.7);
      z-index: 10;
      opacity: 0;
      transform: translateY(-20px);
      animation: fadeInDown 1.5s forwards;
      text-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
      letter-spacing: 1px;
    }
    @keyframes fadeInDown {
      to {
        opacity: 0.7;
        transform: translateY(0);
      }
    }
    .all-green-scores-button {
      position: absolute;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 10;
      background-color: rgba(0,0,0,0.7);
      color: white;
      border: 1px solid #4CAF50;
      font-size: 12px;
      padding: 6px 12px;
    }
    .info-panel {
      position: absolute;
      top: 10px;
      right: 10px;
      background: rgba(0, 0, 0, 0.8);  /* Dark panel with high opacity */
      padding: 20px;
      border-radius: 4px;
      width: 300px;
      border: 1px solid #444;  /* Subtle border for definition */
      color: #ffffff;  /* Light text for dark background */
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);  /* Stronger shadow for depth */
    }
    .info-panel h3 {
      margin-top: 0;
      border-bottom: 1px solid #555;  /* Subtle divider */
      padding-bottom: 10px;
      color: #4CAF50;  /* Green heading for emphasis */
    }
    .info-panel p {
      margin: 8px 0;
    }
    .influencers-list {
      margin-top: 15px;
      max-height: 200px;
      overflow-y: auto;
      padding-right: 5px;
      border-top: 1px solid #555;  /* Subtle divider */
    }
    .influencer-item {
      display: flex;
      justify-content: space-between;
      padding: 5px 0;
      border-bottom: 1px solid #333;  /* Very subtle divider */
    }
    .slider-container {
      margin: 15px 0;
    }
    .slider-container label {
      display: block;
      margin-bottom: 5px;
      color: #aaaaaa;  /* Slightly muted text */
    }
    .slider-container input {
      width: 100%;
    }
    .score-value {
      display: block;
      text-align: center;
      margin: 5px 0;
      font-size: 1.2em;
      font-weight: bold;
      color: #4CAF50;  /* Green for value display */
    }
    .button {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 8px 16px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 14px;
      margin: 10px 0;
      cursor: pointer;
      border-radius: 4px;
      transition: background-color 0.3s;
    }
    .button:hover {
      background-color: #45a049;
    }
    .button:disabled {
      background-color: #cccccc;
      color: #666666;
      cursor: not-allowed;
    }
    .control-button {
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 10;
      background-color: rgba(0,0,0,0.7);
      color: white;
      border: 1px solid #4CAF50;
    }
    .sector-legend {
      position: absolute;
      bottom: 10px;
      left: 10px;
      background: rgba(20, 20, 20, 0.85);  /* Dark, semi-transparent background */
      color: #ffffff;  /* White text for dark mode */
      padding: 10px;
      border-radius: 4px;
      max-width: 250px;
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #444;  /* Subtle border */
    }
    .sector-legend h4 {
      margin-top: 0;
      border-bottom: 1px solid #555;  /* Subtle divider */
      padding-bottom: 5px;
    }
    .sector-item {
      display: flex;
      align-items: center;
      margin: 4px 0;
    }
    .color-box {
      width: 15px;
      height: 15px;
      margin-right: 8px;
      border: 1px solid #444;
    }
  </style>

  <script type="importmap">{ "imports": {
    "react": "https://esm.sh/react",
    "react-dom": "https://esm.sh/react-dom/client"
  }}</script>
</head>

<body>
  <div id="app"></div>

  <script src="//cdn.jsdelivr.net/npm/@babel/standalone"></script>
  <script src="//unpkg.com/d3@7/dist/d3.min.js"></script>
  <script type="text/jsx" data-type="module">
    import ForceGraph3D from 'https://esm.sh/react-force-graph-3d?external=react';
    import React, { useState, useEffect, useCallback, useRef } from 'react';
    import { createRoot } from 'react-dom';

    console.log('Script started...');
    
    const App = () => {
      console.log('Rendering App component...');
      const [graphData, setGraphData] = useState(null);
      const [selectedNode, setSelectedNode] = useState(null);
      const [influencers, setInfluencers] = useState([]);
      const [loading, setLoading] = useState(false);
      const [greenScore, setGreenScore] = useState(50);
      const [updateLoading, setUpdateLoading] = useState(false);
      const [sectors, setSectors] = useState({});
      const [stableMode, setStableMode] = useState(false);
      const fgRef = useRef();

      // Fetch graph data from API
      const fetchGraphData = useCallback(() => {
        fetch('/api/graph')
          .then(res => res.json())
          .then(data => {
            setGraphData(data);
            
            // Extract unique sectors and their colors
            const sectorsMap = {};
            data.nodes.forEach(node => {
              if (node.sector && !sectorsMap[node.sector] && node.color) {
                sectorsMap[node.sector] = node.color;
              }
            });
            setSectors(sectorsMap);
          })
          .catch(error => {
            console.error('Error fetching graph data:', error);
          });
      }, []);
      
      useEffect(() => {
        fetchGraphData();
      }, [fetchGraphData]);

      // Fetch node influences when a node is selected
      useEffect(() => {
        if (selectedNode) {
          setGreenScore(selectedNode.val);
          setLoading(true);
          // Encode the node ID to handle spaces properly
          const encodedNodeId = encodeURIComponent(selectedNode.id);
          fetch(`/api/influences/${encodedNodeId}`)
            .then(res => res.json())
            .then(data => {
              setInfluencers(data.influencers || []);
              setLoading(false);
            })
            .catch(error => {
              console.error('Error fetching influences:', error);
              setLoading(false);
            });
        } else {
          setInfluencers([]);
        }
      }, [selectedNode]);
      
      // Effect to spread out the graph when it loads
      useEffect(() => {
        if (fgRef.current && graphData) {
          // More stable force settings for the larger dataset
          fgRef.current.d3Force('charge').strength(-120); // Reduced repulsion force
          fgRef.current.d3Force('link').distance(link => 40 + link.value * 8); // Slightly shorter links
          fgRef.current.d3Force('center').strength(1.0); // Stronger centering force
          
          // Initial camera position - move further back for the larger dataset
          fgRef.current.cameraPosition({ z: 300 });
          
          // Run simulation ticks for better initial layout, but do this more gently
          setTimeout(() => {
            // Warm up simulation with decreasing alpha
            for (let i = 0; i < 100; i++) {
              // Tick the animation cycle a few times to stabilize
              if (fgRef.current) {
                fgRef.current.tickFrame();
              }
            }
            // Reduce repulsion after initial layout
            fgRef.current.d3Force('charge').strength(-100);
          }, 300);
        }
      }, [graphData, fgRef]);
      
      // Toggle stable mode
      const toggleStableMode = useCallback(() => {
        if (!graphData || !fgRef.current) return;
        
        setStableMode(prevMode => {
          const newMode = !prevMode;
          
          // Create a copy of the current nodes
          const newNodes = [...graphData.nodes];
          
          if (newMode) {
            // Enable stable mode - freeze node positions
            for (let i = 0; i < newNodes.length; i++) {
              const node = newNodes[i];
              if (node.x !== undefined && node.y !== undefined && node.z !== undefined) {
                node.fx = node.x;
                node.fy = node.y;
                node.fz = node.z;
              }
            }
          } else {
            // Disable stable mode - unfreeze node positions
            for (let i = 0; i < newNodes.length; i++) {
              const node = newNodes[i];
              delete node.fx;
              delete node.fy;
              delete node.fz;
            }
          }
          
          // Update the graph data with the modified nodes
          setGraphData({
            nodes: newNodes,
            links: graphData.links
          });
          
          return newMode;
        });
      }, [graphData]);

      // Handle node click
      const handleNodeClick = useCallback(node => {
        setSelectedNode(node);
      }, []);
      
      // Update green score
      const updateGreenScore = () => {
        if (!selectedNode) return;
        
        setUpdateLoading(true);
        // Encode the node ID to handle spaces properly
        const encodedNodeId = encodeURIComponent(selectedNode.id);
        fetch(`/api/update_green_score/${encodedNodeId}/${greenScore}`)
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              // Update only the affected nodes instead of refreshing the entire graph
              if (data.updatedNodes && data.updatedNodes.length > 0) {
                setGraphData(prevData => {
                  // Create a copy of the current graph data
                  const newData = {
                    nodes: [...prevData.nodes],
                    links: [...prevData.links]
                  };
                  
                  // Update only the green scores (val) of affected nodes
                  for (let i = 0; i < newData.nodes.length; i++) {
                    const node = newData.nodes[i];
                    const updatedNode = data.updatedNodes.find(n => n.id === node.id);
                    if (updatedNode) {
                      node.val = updatedNode.val;
                    }
                  }
                  
                  return newData;
                });
                
                // Update the selected node data if it was changed
                setSelectedNode(prevNode => {
                  const updatedNode = data.updatedNodes.find(n => n.id === prevNode.id);
                  if (updatedNode) {
                    return { ...prevNode, val: updatedNode.val };
                  }
                  return prevNode;
                });
                
                // Update influencers if available
                if (data.updatedInfluencers && data.updatedInfluencers.influencers) {
                  setInfluencers(data.updatedInfluencers.influencers);
                }
              }
              
              setUpdateLoading(false);
            } else {
              console.error('Failed to update green score:', data.message);
              setUpdateLoading(false);
            }
          })
          .catch(error => {
            console.error('Error updating green score:', error);
            setUpdateLoading(false);
          });
      };

      // Render node info panel
      const renderInfoPanel = () => {
        if (!selectedNode) {
          return (
            <div className="info-panel">
              <h3>Green Score Analysis</h3>
              <p>Click on a node to see details and edit green score.</p>
            </div>
          );
        }

        return (
          <div className="info-panel">
            <h3>Node Details</h3>
            <p><strong>Name:</strong> {selectedNode.name}</p>
            <p><strong>Sector:</strong> {selectedNode.sector}</p>
            <p><strong>Green Score:</strong> {selectedNode.val.toFixed(2)}</p>
            
            <div className="slider-container">
              <label htmlFor="greenScore">Adjust Green Score:</label>
              <input 
                type="range" 
                id="greenScore" 
                min="0" 
                max="100" 
                step="1" 
                value={greenScore} 
                onChange={e => setGreenScore(parseInt(e.target.value))}
              />
              <span className="score-value">{greenScore}</span>
              <button 
                className="button" 
                onClick={updateGreenScore}
                disabled={updateLoading}
              >
                {updateLoading ? 'Updating...' : 'Update Score'}
              </button>
            </div>
            
            <div className="influencers-section">
              <h4>Influencers:</h4>
              {loading ? (
                <p>Loading influencers...</p>
              ) : influencers.length > 0 ? (
                <div className="influencers-list">
                  {influencers.map((inf, idx) => (
                    <div key={idx} className="influencer-item">
                      <span>{inf.name}</span>
                      <span>{inf.influence.toFixed(2)}</span>
                    </div>
                  ))}
                </div>
              ) : (
                <p>No influencers found.</p>
              )}
            </div>
          </div>
        );
      };
      
      // Render sector legend
      const renderSectorLegend = () => {
        return (
          <div className="sector-legend">
            <h4>Sectors</h4>
            {Object.entries(sectors).map(([sector, color]) => (
              <div key={sector} className="sector-item">
                <div className="color-box" style={{ backgroundColor: color }}></div>
                <span>{sector}</span>
              </div>
            ))}
          </div>
        );
      };

      if (!graphData || !graphData.nodes || !graphData.links) {
        console.log('Graph data not ready:', graphData);
        return <div>Loading graph data...</div>;
      }

      console.log(`Rendering graph with ${graphData.nodes.length} nodes and ${graphData.links.length} links`);
        return (
        <>
          <div className="title">GaiaGraph</div>
          
          <button 
            className="button all-green-scores-button" 
            onClick={() => setSelectedNode(null)}
          >
            All Green Scores
          </button>
          
          <ForceGraph3D
            ref={fgRef}
            graphData={graphData}
            nodeLabel={node => `${node.name}: Green Score ${node.val.toFixed(2)}`}
            nodeVal={node => 4 + (node.val / 20)}  // Adjusted size for better visibility with 400 node dataset
            nodeColor={node => node.color}
            nodeRelSize={5}  // Slightly adjusted for better proportions
            linkWidth={link => link.value * 2}  // Thicker links for better visibility
            linkColor={() => "#FFFFFF"}  // White links for better contrast on dark background
            linkOpacity={0.8}  // Slightly adjusted opacity for cleaner look
            linkDirectionalParticles={4}  // Fewer particles for stability
            linkDirectionalParticleWidth={link => link.value}  // Thinner particles for stability
            linkDirectionalParticleSpeed={d => d.value * 0.01}  // Slower particles for stability
            linkDirectionalParticleColor={() => '#FFFFFF'}  // White particles
            onNodeClick={handleNodeClick}
            backgroundColor={"#000000"}  // Dark background
            showNavInfo={false}
            cooldownTime={10000}  // Longer cooldown for stability
            warmupTicks={150}  // More warmup ticks
            cooldownTicks={150}  // More cooldown ticks
            enablePointerInteraction={true}
          />
          {renderInfoPanel()}
          {renderSectorLegend()}
        </>
      );
    };

    // Initialize the application with error handling
    try {
      console.log('Starting React app...');
      const rootElement = document.getElementById('app');
      if (!rootElement) {
        console.error('Root element #app not found');
      } else {
        createRoot(rootElement).render(<App />);
        console.log('React app started successfully');
      }
    } catch (error) {
      console.error('Error starting React app:', error);
      document.getElementById('app').innerHTML = `
        <div style="color: white; background: #333; padding: 20px; border-radius: 5px;">
          <h2>Error Loading Application</h2>
          <p>There was a problem initializing the graph visualization. Please check the console for details.</p>
          <pre>${error.toString()}</pre>
        </div>
      `;
    }
  </script>
</body>
</html>
